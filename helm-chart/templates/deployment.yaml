apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nativeseries.fullname" . }}
  labels:
    {{- include "nativeseries.labels" . | nindent 4 }}
spec:
  {{- if not .Values.hpa.enabled }}
  replicas: 2
  {{- end }}
  selector:
    matchLabels:
      {{- include "nativeseries.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "nativeseries.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.secrets.enabled }}
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- end }}
    spec:
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ include "nativeseries.name" . }}
          image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
          imagePullPolicy: {{ .Values.app.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ div .Values.healthCheck.initialDelaySeconds 2 }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            {{- range .Values.app.env }}
            - name: {{ .name }}
              {{- if .value }}
              value: {{ .value | quote }}
              {{- end }}
              {{- if .valueFrom }}
              valueFrom:
                {{- toYaml .valueFrom | nindent 16 }}
              {{- end }}
            {{- end }}
            {{- if .Values.configMaps.enabled }}
            - name: APP_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMaps.appConfig.name }}
                  key: app_name
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.configMaps.appConfig.name }}
                  key: log_level
            {{- end }}
            {{- if .Values.secrets.enabled }}
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.dbSecret.name }}
                  key: db-username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.dbSecret.name }}
                  key: db-password
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.dbSecret.name }}
                  key: db-host
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.dbSecret.name }}
                  key: db-name
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.apiSecret.name }}
                  key: api-key
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.apiSecret.name }}
                  key: jwt-secret
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.apiSecret.name }}
                  key: session-secret
            {{- end }}
          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
            {{- if .Values.logging.enabled }}
            - name: logs
              mountPath: {{ .Values.logging.volume.mountPath }}
              readOnly: false
            {{- end }}
            {{- if and .Values.securityContext .Values.securityContext.readOnlyRootFilesystem }}
            - name: tmp
              mountPath: /tmp
            - name: var-run
              mountPath: /var/run
            {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ .Values.configMaps.appConfig.name }}
        {{- if .Values.logging.enabled }}
        - name: logs
          persistentVolumeClaim:
            claimName: {{ include "nativeseries.fullname" . }}-logs-pvc
        {{- else }}
        - name: logs
          emptyDir: {}
        {{- end }}
        {{- if and .Values.securityContext .Values.securityContext.readOnlyRootFilesystem }}
        - name: tmp
          emptyDir: {}
        - name: var-run
          emptyDir: {}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}