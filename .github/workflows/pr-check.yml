name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 bandit safety
        
    - name: Check code formatting
      run: |
        echo "🔍 Checking code formatting with Black..."
        black --check app/ --diff
        
    - name: Run linting
      run: |
        echo "🔍 Running linting with Flake8..."
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Run security scan
      run: |
        echo "🔒 Running security scan with Bandit..."
        bandit -r app/ -f json -o bandit-report.json || echo "⚠️ Security issues found"
        
    - name: Check for vulnerabilities
      run: |
        echo "🔒 Checking for known vulnerabilities..."
        safety check --json --output safety-report.json || echo "⚠️ Vulnerability issues found"
        
    - name: Run unit tests
      run: |
        echo "🧪 Running unit tests..."
        python -m pytest app/ -m "not integration and not slow" -v
        
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 7

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Test Docker build
      run: |
        echo "🐳 Testing Docker build..."
        docker build --target test -t nativeseries-test .
        echo "✅ Docker build test passed"
        
    - name: Test Netlify build
      run: |
        echo "🌐 Testing Netlify build..."
        chmod +x build.sh
        ./build.sh
        echo "✅ Netlify build test passed"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run integration tests
      run: |
        echo "🧪 Running integration tests..."
        python -m pytest app/ -m integration -v || echo "⚠️ Integration tests failed (continuing...)"
        
    - name: Test API endpoints
      run: |
        echo "🧪 Testing API endpoints..."
        python -m pytest app/ -m "not slow" -v || echo "⚠️ API tests failed (continuing...)"

  notify-pr:
    name: Notify PR Status
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-test, integration-test]
    if: always()
    
    steps:
    - name: Check PR status
      run: |
        echo "📊 Checking PR status..."
        
        if [ "${{ needs.lint-and-test.result }}" == "success" ]; then
          echo "✅ Lint and test passed"
        else
          echo "❌ Lint and test failed"
        fi
        
        if [ "${{ needs.build-test.result }}" == "success" ]; then
          echo "✅ Build test passed"
        else
          echo "❌ Build test failed"
        fi
        
        if [ "${{ needs.integration-test.result }}" == "success" ]; then
          echo "✅ Integration test passed"
        else
          echo "❌ Integration test failed"
        fi
        
    - name: Create PR summary
      run: |
        echo "## 🔍 Pull Request Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Code Quality" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.lint-and-test.result }}" == "success" ]; then
          echo "- ✅ **Linting**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Unit Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Code Quality**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Tests" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.build-test.result }}" == "success" ]; then
          echo "- ✅ **Docker Build**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Netlify Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Build Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Integration Tests" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.integration-test.result }}" == "success" ]; then
          echo "- ✅ **Integration Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Integration Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**PR by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY