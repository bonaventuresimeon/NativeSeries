name: PR Checks

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    name: Validate Changes
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run quick linting
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Check formatting
      run: |
        black --check app/ --diff
        
    - name: Run tests
      run: |
        pytest app/test_*.py -v
        
    - name: Validate Docker build
      run: |
        docker build -t pr-test .
        
    - name: Comment on PR
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('## PR Validation Results')
          );
          
          const status = '${{ job.status }}';
          const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
          const message = `## PR Validation Results ${emoji}
          
          **Status**: ${status.toUpperCase()}
          **Commit**: \`${{ github.sha }}\`
          **Workflow**: [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ${status === 'success' ? 
            'üéâ All checks passed! This PR is ready for review.' : 
            '‚ö†Ô∏è Some checks failed. Please review the workflow logs and fix any issues.'
          }`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: message
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
          }