name: NativeSeries CI/CD with ArgoCD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: bonaventuresimeon/nativeseries
  PYTHON_VERSION: '3.11'
  PRODUCTION_HOST: "54.166.101.159"
  PRODUCTION_PORT: "30011"
  ARGOCD_PORT: "30080"
  GRAFANA_PORT: "30081"
  PROMETHEUS_PORT: "30082"
  LOKI_PORT: "30083"
  NAMESPACE: "nativeseries"
  ARGOCD_NAMESPACE: "argocd"

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -m pytest app/ -v --tb=short

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-argocd:
    name: Deploy to ArgoCD
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: '1.33.3'
        
    - name: Configure kubectl for Kind cluster
      run: |
        # Create kubeconfig for Kind cluster
        mkdir -p $HOME/.kube
        kind get kubeconfig --name gitops-cluster > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
    - name: Deploy to Kubernetes via ArgoCD
      run: |
        echo "🚀 Deploying NativeSeries to Kubernetes via ArgoCD..."
        
        # Apply namespaces
        kubectl apply -f deployment/production/01-namespace.yaml
        
        # Wait for namespaces to be ready
        kubectl wait --for=condition=Active namespace/${NAMESPACE} --timeout=60s
        kubectl wait --for=condition=Active namespace/${ARGOCD_NAMESPACE} --timeout=60s
        
        # Install ArgoCD if not already installed
        if ! kubectl get deployment argocd-server -n ${ARGOCD_NAMESPACE} >/dev/null 2>&1; then
          echo "📦 Installing ArgoCD..."
          kubectl apply -n ${ARGOCD_NAMESPACE} -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.9.3/manifests/install.yaml
          
          # Wait for ArgoCD to be ready
          echo "⏳ Waiting for ArgoCD to be ready..."
          kubectl wait --for=condition=Available deployment/argocd-server -n ${ARGOCD_NAMESPACE} --timeout=300s
        fi
        
        # Apply ArgoCD service
        kubectl apply -f deployment/production/04-argocd-service.yaml
        
        # Apply ArgoCD application
        kubectl apply -f deployment/production/05-argocd-application.yaml
        
        echo "✅ ArgoCD deployment completed"

  deploy-monitoring:
    name: Deploy Monitoring Stack
    runs-on: ubuntu-latest
    needs: deploy-argocd
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: '1.33.3'
        
    - name: Configure kubectl for Kind cluster
      run: |
        mkdir -p $HOME/.kube
        kind get kubeconfig --name gitops-cluster > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
    - name: Deploy Monitoring Stack
      run: |
        echo "📊 Deploying monitoring stack..."
        
        # Deploy Prometheus
        kubectl apply -f deployment/production/06-monitoring-stack.yaml
        
        # Wait for monitoring pods to be ready
        echo "⏳ Waiting for monitoring stack to be ready..."
        kubectl wait --for=condition=Available deployment/prometheus -n monitoring --timeout=300s || true
        kubectl wait --for=condition=Available deployment/grafana -n monitoring --timeout=300s || true
        kubectl wait --for=condition=Available deployment/loki -n logging --timeout=300s || true
        
        echo "✅ Monitoring stack deployed"

  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-argocd, deploy-monitoring]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: '1.33.3'
        
    - name: Configure kubectl for Kind cluster
      run: |
        mkdir -p $HOME/.kube
        kind get kubeconfig --name gitops-cluster > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
    - name: Verify Application Deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Wait for application pods
        echo "⏳ Waiting for application pods..."
        kubectl wait --for=condition=Available deployment/nativeseries -n ${NAMESPACE} --timeout=300s
        
        # Check pod status
        echo "📊 Pod Status:"
        kubectl get pods -n ${NAMESPACE}
        kubectl get pods -n ${ARGOCD_NAMESPACE}
        kubectl get pods -n monitoring
        kubectl get pods -n logging
        
        # Check services
        echo "🌐 Service Status:"
        kubectl get services -n ${NAMESPACE}
        kubectl get services -n ${ARGOCD_NAMESPACE}
        kubectl get services -n monitoring
        kubectl get services -n logging
        
        # Test application health
        echo "🏥 Testing application health..."
        sleep 30  # Wait for services to be ready
        
        # Get ArgoCD admin password
        ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        echo "🔑 ArgoCD admin password: $ARGOCD_PASSWORD"
        
        echo "✅ Deployment verification completed"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: verify-deployment
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 5
    
    steps:
    - name: Deployment Summary
      run: |
        echo "🎉 NativeSeries Deployment Summary"
        echo "=================================="
        echo "📦 Docker Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "🌐 Application URL: http://${{ env.PRODUCTION_HOST }}:${{ env.PRODUCTION_PORT }}"
        echo "🎯 ArgoCD Dashboard: http://${{ env.PRODUCTION_HOST }}:${{ env.ARGOCD_PORT }}"
        echo "📊 Grafana: http://${{ env.PRODUCTION_HOST }}:${{ env.GRAFANA_PORT }}"
        echo "📈 Prometheus: http://${{ env.PRODUCTION_HOST }}:${{ env.PROMETHEUS_PORT }}"
        echo "📝 Loki: http://${{ env.PRODUCTION_HOST }}:${{ env.LOKI_PORT }}"
        echo ""
        echo "🔑 ArgoCD Login:"
        echo "   Username: admin"
        echo "   Password: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d"
        echo ""
        echo "✅ All services deployed successfully!"