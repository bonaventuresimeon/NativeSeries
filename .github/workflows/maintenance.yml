name: Maintenance

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety pip-audit
        
    - name: Check for security vulnerabilities
      run: |
        echo "🔒 Checking for security vulnerabilities..."
        safety check --json --output safety-report.json || echo "⚠️ Security vulnerabilities found"
        
    - name: Check for outdated packages
      run: |
        echo "📦 Checking for outdated packages..."
        pip list --outdated --format=json > outdated-packages.json || echo "⚠️ Could not check for outdated packages"
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-reports
        path: |
          safety-report.json
          outdated-packages.json
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit
        
    - name: Run Bandit security scan
      run: |
        echo "🔒 Running Bandit security scan..."
        bandit -r app/ -f json -o bandit-report.json || echo "⚠️ Security issues found"
        
    - name: Run Safety check
      run: |
        echo "🔒 Running Safety vulnerability check..."
        safety check --json --output safety-vuln-report.json || echo "⚠️ Vulnerabilities found"
        
    - name: Run pip-audit
      run: |
        echo "🔒 Running pip-audit..."
        pip-audit --format json --output pip-audit-report.json || echo "⚠️ Audit issues found"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-vuln-report.json
          pip-audit-report.json
        retention-days: 30

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy
        
    - name: Check code formatting
      run: |
        echo "🔍 Checking code formatting..."
        black --check app/ --diff || echo "⚠️ Formatting issues found"
        
    - name: Check import sorting
      run: |
        echo "🔍 Checking import sorting..."
        isort --check-only app/ || echo "⚠️ Import sorting issues found"
        
    - name: Run type checking
      run: |
        echo "🔍 Running type checking..."
        mypy app/ --ignore-missing-imports || echo "⚠️ Type checking issues found"
        
    - name: Run linting
      run: |
        echo "🔍 Running linting..."
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "⚠️ Linting issues found"

  notify-maintenance:
    name: Notify Maintenance Results
    runs-on: ubuntu-latest
    needs: [dependency-check, security-scan, code-quality]
    if: always()
    
    steps:
    - name: Create maintenance summary
      run: |
        echo "## 🔧 NativeSeries Maintenance Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Dependency Check" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.dependency-check.result }}" == "success" ]; then
          echo "- ✅ **Status**: Completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Status**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Scan" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "- ✅ **Status**: Completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Status**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Code Quality" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.code-quality.result }}" == "success" ]; then
          echo "- ✅ **Status**: Completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Status**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Run by**: GitHub Actions (Scheduled)" >> $GITHUB_STEP_SUMMARY
        echo "**Date**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY