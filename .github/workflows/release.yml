name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: bonaventuresimeon/nativeseries
  PYTHON_VERSION: '3.11'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate changelog
      id: changelog
      run: |
        echo "📝 Generating changelog..."
        # Get commits since last tag
        git log --oneline $(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")..HEAD > changelog.txt || echo "No previous tags found" > changelog.txt
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: NativeSeries ${{ steps.get_version.outputs.version }}
        body: |
          ## 🎉 NativeSeries ${{ steps.get_version.outputs.version }}
          
          ### Changes in this release:
          ${{ steps.changelog.outputs.changelog }}
          
          ### 🚀 Quick Start
          ```bash
          # Deploy with Helm
          helm upgrade --install nativeseries helm-chart \
            --namespace nativeseries \
            --create-namespace \
            --set image.tag=${{ steps.get_version.outputs.version }}
          ```
          
          ### 📦 Docker Image
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
          ```
          
          ### 🔗 Links
          - **Application**: http://54.166.101.159:30011
          - **Documentation**: http://54.166.101.159:30011/docs
          - **Health Check**: http://54.166.101.159:30011/health
        draft: false
        prerelease: false

  build-release:
    name: Build Release Image
    runs-on: ubuntu-latest
    needs: release
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.get_version.outputs.version }}
          type=raw,value=latest
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha,scope=${{ github.workflow }}-${{ github.job }}
        cache-to: type=gha,mode=max,scope=${{ github.workflow }}-${{ github.job }}

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [release, build-release]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Deploy to production
      run: |
        echo "🚀 Deploying NativeSeries ${{ steps.get_version.outputs.version }} to production"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}"
        
        # Update ArgoCD application if it exists
        if [ -f "argocd/application.yaml" ]; then
          echo "✅ ArgoCD application found, updating..."
          # The ArgoCD application will automatically sync with the new image tag
        else
          echo "⚠️ No ArgoCD application found, creating basic deployment"
          mkdir -p argocd
          cat > argocd/application.yaml << EOF
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: nativeseries
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/bonaventuresimeon/NativeSeries
    targetRevision: ${{ steps.get_version.outputs.version }}
    path: helm-chart
  destination:
    server: https://kubernetes.default.svc
    namespace: nativeseries
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
EOF
        fi
        
        echo "✅ Release deployment configuration ready"
        echo "Production URL: http://54.166.101.159:30011"
        
    - name: Health check
      run: |
        echo "🏥 Running health check..."
        sleep 60
        for i in {1..5}; do
          if curl -f http://54.166.101.159:30011/health; then
            echo "✅ Health check passed"
            break
          else
            echo "⚠️ Health check attempt $i failed, retrying..."
            sleep 30
          fi
        done
        
    - name: Release summary
      run: |
        echo "## 🎉 NativeSeries ${{ steps.get_version.outputs.version }} Released!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Successfully deployed" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Application**: http://54.166.101.159:30011" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Released by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Date**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY