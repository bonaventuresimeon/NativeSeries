name: Build and Deploy with Helm and ArgoCD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: student-tracker

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        continue-on-error: true

      - name: Validate Python syntax
        run: |
          python -m py_compile app/main.py app/crud.py app/database.py app/models.py
          echo "✅ All Python files compile successfully"

      - name: Run basic tests
        run: |
          python app/test_basic.py

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Add Bitnami repository
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Validate Helm chart
        run: |
          cd helm-chart
          helm lint .

      - name: Validate ArgoCD application
        run: |
          python -c "import yaml; yaml.safe_load(open('argocd/application.yaml')); print('✅ ArgoCD application YAML is valid')"

  build-and-push:
    needs: validate
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image info
        run: |
          echo "Image built and pushed successfully!"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Labels: ${{ steps.meta.outputs.labels }}"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Add Bitnami repository
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Update Helm dependencies
        run: |
          cd helm-chart
          # Only update dependencies if they exist
          if [ -f "Chart.yaml" ] && grep -q "dependencies:" Chart.yaml; then
            helm dependency update || echo "Dependency update failed, continuing..."
          else
            echo "No dependencies to update"
          fi
        continue-on-error: true

      - name: Lint Helm chart
        run: |
          cd helm-chart
          helm lint .

      - name: Generate deployment manifest
        run: |
          cd helm-chart
          helm template student-tracker . --set app.image.tag=${{ github.sha }} > deployment-manifest.yaml
          echo "✅ Helm chart template generated successfully"

      - name: Deploy to ArgoCD (Manual)
        run: |
          echo "🚀 Deployment manifest generated successfully!"
          echo "📋 To deploy to your cluster:"
          echo "1. Apply the ArgoCD application: kubectl apply -f argocd/application.yaml"
          echo "2. Sync the application: argocd app sync student-tracker"
          echo "3. Monitor deployment: argocd app get student-tracker"
          echo ""
          echo "🌐 Your application will be available at:"
                      echo "   - Student Tracker: http://18.206.89.183:30011"
          echo "   - ArgoCD UI: http://18.206.89.183:30080"

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'