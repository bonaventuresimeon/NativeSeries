name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Docker image tag to deploy (default: latest)'
        required: false
        default: 'latest'
      skip_tests:
        description: 'Skip running tests'
        required: false
        default: false
        type: boolean

jobs:
  pre-deployment-tests:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        pytest app/test_*.py -v --tb=short
        
    - name: Test Docker build
      run: |
        docker build -t manual-deploy-test .

  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: pre-deployment-tests
    if: always() && (needs.pre-deployment-tests.result == 'success' || inputs.skip_tests)
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy using existing script
      env:
        DOCKER_USERNAME: ${{ github.actor }}
        PRODUCTION_HOST: ${{ vars.PRODUCTION_HOST || '18.206.89.183' }}
        PRODUCTION_PORT: ${{ vars.PRODUCTION_PORT || '30011' }}
      run: |
        echo "ðŸš€ Starting manual deployment to ${{ inputs.environment }}"
        echo "Docker image version: ${{ inputs.version }}"
        echo "Production host: $PRODUCTION_HOST:$PRODUCTION_PORT"
        
        # Make deploy script executable
        chmod +x ./deploy.sh
        
        # Run the deployment
        if [ "${{ inputs.environment }}" = "production" ]; then
          echo "Deploying to production..."
          ./deploy.sh --deploy-prod
        else
          echo "Deploying to staging..."
          # You can modify this to use staging-specific deployment
          ./deploy.sh --build-image
        fi
        
    - name: Deployment Summary
      run: |
        echo "## ðŸŽ‰ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Verify the deployment at your application URL" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor logs for any issues" >> $GITHUB_STEP_SUMMARY
        echo "- Run post-deployment tests if needed" >> $GITHUB_STEP_SUMMARY